swagger: "2.0"

info:
  title: "{{title}}"
  version: "1.0"

basePath: /v1.0

paths:
  /users:
    get:
      responses:
        '200':
          description: 'Fetch a list of users'
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
    post:
      parameters:
        - in: body
          name: user
          required: true
          schema:
            $ref: '#/definitions/UserRegistration'
      responses:
        '201':
          description: 'User has been successfully created.'
        '409':
          description: 'User with such username exists. (TODO duplicate error in general)'
        '500':
          description: 'User was no registered due to and error.'
  # Not implemented yet
  # '/users/{id}':
  #   put:
  #     parameters:
  #       - in: path
  #         name: id
  #         required: true
  #         type: integer
  #       - in: body
  #         name: user
  #         required: true
  #         schema:
  #           $ref: '#/definitions/User'
  #     responses:
  #       '200':
  #         description: 'Update a user by ID'
  #       # TODO Add response when not found, etc.
  #   delete:
  #     parameters:
  #       - in: path
  #         name: id
  #         required: true
  #         type: integer
  #     responses:
  #       '204':
  #         description: 'Delete a user by ID'
  #   get:
  #     parameters:
  #       - in: path
  #         name: id
  #         required: true
  #         type: integer
  #     responses:
  #       '200':
  #         description: 'Fetch a user by ID'
  #         schema:
  #           $ref: '#/definitions/User'
  #       # TODO Add response when not found, etc.
definitions:
  UserRegistration:
    type: object
    properties:
      username: { type: string }
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username: { type: string }
      created_at:
        type: string
        format: date-time
