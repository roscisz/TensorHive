swagger: "2.0"

info:
  title: "{{title}}"
  version: "1.0"

basePath: /v1.0

paths:
  /users:
    get:
      responses:
        '200':
          description: 'All fetched with success.'
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
    post:
      parameters:
        - in: body
          name: user
          required: true
          schema:
            $ref: '#/definitions/CreateUserController'
      responses:
        '201':
          description: 'Successfully created.'
        '409':
          description: 'Duplication error.'
        '500':
          description: 'Not registered due to an error.'
  /reservations:
    get:
      responses:
        '200':
          description: 'All fetched with success.'
          schema:
            type: array
            items:
              $ref: '#/definitions/ReservationEvent'
    post:
      parameters:
        - in: body
          name: reservation_event
          required: True
          schema:
            $ref: '#/definitions/CreateReservationEventController'
      responses:
        '201':
          description: 'Successfully created.'
        '500':
          description: 'Not created due to an error.'
  '/reservations/{id}':
    delete:
      parameters:
        - in: path
          name: id
          required: true
          type: integer
      responses:
        '204':
          description: 'Successfully deleted.'
        '404':
          description: 'Not found.'
  # TODO Nodes: Add more specific schemas, response codes + descriptions
  /nodes/hostnames:
    get:
      operationId: 'tensorhive.api.api.nodes.get_hostnames'
      responses:
        '200':
          description: 'List of hostnames fetched with success'
          schema:
            type: array
            items: 
              type: string
  /nodes/metrics:
    get:
      operationId: 'tensorhive.api.api.nodes.get_all_metrics'
      responses:
        '200':
          description: 'All metrics fetched with success.'
          schema:
            type: array
            items: 
              type: object
  /nodes/{hostname}/metrics/gpu:
    get:
      operationId: 'tensorhive.api.api.nodes.get_gpu_metrics'
      parameters:
        - in: path
          name: hostname
          required: true
          type: string
      responses:
        '200':
          description: 'List of GPU(s) metrics fetched with success.'
          schema:
            type: array
            items: 
              type: object
        '404':
          description: 'Not found.'
definitions:
  CreateUserController:
    type: object
    properties:
      username: { type: string }
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username: { type: string }
      createdAt:
        type: string
        format: date-time
  CreateReservationEventController:
    type: object
    properties:
      title: { type: string }
      description: { type: string }
      nodeId: { type: integer}
      userId: { type: integer}
      start:
        type: string
        format: date-time
      end:
        type: string
        format: date-time
      # TODO Add user id, node id
  ReservationEvent:
    type: object
    properties:
      id:
        type: integer
        format: int64
      title: { type: string }
      description: { type: string }
      nodeId: { type: integer}
      userId: { type: integer}
      start:
        type: string
        format: date-time
      end:
        type: string
        format: date-time
      createdAt:
        type: string
        format: date-time
      # TODO Add user id, node id
