swagger: "2.0"

info:
  title: "{{title}} v{{version}}"
  version: "{{version}}"

basePath: "/v{{version}}"

paths:
  /users:
    get:
      tags: 
        - users
      summary: Get all users
      responses:
        '200':
          description: 'All fetched with success.'
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
    post:
      tags: 
        - users
      summary: Create new user
      parameters:
        - in: body
          name: user
          required: true
          schema:
            $ref: '#/definitions/CreateUserController'
      responses:
        '201':
          description: 'Successfully created.'
        '409':
          description: 'Duplication error.'
        '500':
          $ref: '#/responses/InternalError'
  /reservations:
    get:
      tags: 
        - reservations
      summary: Get all reservation events
      responses:
        '200':
          description: 'All fetched with success.'
          schema:
            type: array
            items:
              $ref: '#/definitions/ReservationEvent'
    post:
      tags: 
        - reservations
      summary: Create new reservation event
      parameters:
        - in: body
          name: reservation_event
          required: True
          schema:
            $ref: '#/definitions/CreateReservationEventController'
      responses:
        '201':
          description: 'Successfully created.'
        '500':
          $ref: '#/responses/InternalError'
  '/reservations/{id}':
    delete:
      tags: 
          - reservations
      summary: Delete reservation event by id
      parameters:
        - in: path
          name: id
          required: true
          type: integer
      responses:
        '204':
          description: 'Successfully deleted.'
        '404':
          $ref: '#/responses/NotFound'
  # TODO Nodes: Add more specific schemas, response codes + descriptions
  /nodes/hostnames:
    get:
      tags: 
        - nodes
      summary: Get all hostnames
      operationId: 'tensorhive.api.api.nodes.get_hostnames'
      responses:
        '200':
          description: 'List of hostnames fetched with success'
          schema:
            type: array
            items: 
              type: string
  /nodes/metrics:
    get:
      tags: 
        - nodes
      summary: Get each node's all metric data
      operationId: 'tensorhive.api.api.nodes.get_all_metrics'
      responses:
        '200':
          description: 'Success'
          schema:
            type: object
  /nodes/{hostname}/metrics/gpu:
    get:
      tags: 
        - nodes
      summary: Get node's GPU metric data
      operationId: 'tensorhive.api.api.nodes.get_gpu_metrics'
      parameters:
        - $ref: '#/parameters/hostnameParam'
        - $ref: '#/parameters/gpuMetricTypeQuery'
      responses:
        '200':
          description: 'Success'
          schema:
            type: array
            items: 
              type: object
        '404':
          $ref: '#/responses/NotFound'
definitions:
  CreateUserController:
    type: object
    properties:
      username: { type: string }
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username: { type: string }
      createdAt:
        type: string
        format: date-time
  CreateReservationEventController:
    type: object
    properties:
      title: { type: string }
      description: { type: string }
      nodeId: { type: integer}
      userId: { type: integer}
      start:
        type: string
        format: date-time
      end:
        type: string
        format: date-time
      # TODO Add user id, node id
  ReservationEvent:
    type: object
    properties:
      id:
        type: integer
        format: int64
      title: { type: string }
      description: { type: string }
      nodeId: { type: integer}
      userId: { type: integer}
      start:
        type: string
        format: date-time
      end:
        type: string
        format: date-time
      createdAt:
        type: string
        format: date-time
      # TODO Add user id, node id

responses:
  # Example responses
  # TODO Define more complex behaviour and use these reusable responses where possible (when API begins to stabilize)
  NotFound:
    description: Resource was not found
  Unauthorized:
    description: Unauthorized
  InternalError:
    description: Internal Server Error

parameters:
  hostnameParam:
    description: Node's hostname in the network
    in: path
    name: hostname
    required: true
    type: string
  gpuMetricTypeQuery:
    description: Metric type. If not present, queries for all metrics
    in: query
    name: metric_type
    required: false
    type: string
    enum:
      - name
      - uuid
      - fan
      - mem_free
      - mem_used
      - mem_total
      - util
      - mem_util
      - temp
      - power